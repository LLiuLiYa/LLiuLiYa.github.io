<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YumesakiKan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-06T06:51:25.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YumeSakiKan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RequestMapping</title>
    <link href="http://yoursite.com/2020/06/06/spring-requestmapping/"/>
    <id>http://yoursite.com/2020/06/06/spring-requestmapping/</id>
    <published>2020-06-05T23:16:47.952Z</published>
    <updated>2020-06-06T06:51:25.134Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>###RequestMapping的其他属性<br>method：限定请求方式（GET、POST….）</p><p>params：规定请求参数<br><code>params={&quot;username&quot;}</code>：传参数时必须带一个username<br>！即是必须不带<br>username指定值=123：传参时username值必须是123<br>！即是不是123<br><code>@RequestParam</code>：获取请求参数,参数默认是必须带<br>required：这个参数是否是必须的<br>defaultvalue：给了默认值</p><p>headers：规定请求头（和params一样 值为浏览器的F12下headers里的值）<br><code>@RequestHeader</code>：获取请求头某参数值。<br><code>@CookieValue(&quot;JSESSIONID&quot;)</code>：获取cookie的jid值</p><p>consumes：只接受内容类型是哪种的请求，规定请求头中的Content-Type</p><p>produces：告诉浏览器返回的内容类型是什么，给响应头加上Content-Type</p><p>###RequestMapping模糊匹配<br>URL地址可以写模糊的通配符：<br>？：能替代任意一个字符<br><em>：能替代任意多个字符，和一层路径<br>*</em>：能替代多层路径<br>多个匹配情况下，精确优先</p><p>路径上可以有占位符：可以在任意路径的地方写一个{变量名}<br>当需要获得变量名值时，使用<code>@PathVariable(&quot;变量名&quot;)</code>注解从路径中来获取值</p><p>###视图解析器<br>自动拼接页面地址</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean&gt; <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span><br><span class="line">&lt;property name="prefix" value="/WEB-INF/pages/"&gt;&lt;/property&gt;</span><br><span class="line">&lt;property name="suffix" value=".jsp"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>###转换非常规请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;hhmf&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">filter</span>.<span class="title">HiddenHttpMethodFilter</span>.<span class="title">class</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">hhmf</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建post类型的表单时，表单项中携带一个<code>_method</code>的参数，value值就是需要转化的请求名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;###RequestMapping的其他属性&lt;br&gt;method：限定请求方式（GET、POST….）&lt;/p&gt;
&lt;p&gt;params：规定请求参数&lt;br&gt;&lt;code&gt;params={&amp;quot;username&amp;quot;}&lt;/code&gt;：
      
    
    </summary>
    
    
      <category term="MVC" scheme="http://yoursite.com/categories/MVC/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>前端控制器</title>
    <link href="http://yoursite.com/2020/06/05/spring-%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2020/06/05/spring-%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2020-06-05T15:33:54.166Z</published>
    <updated>2020-06-06T14:19:21.093Z</updated>
    
    <content type="html"><![CDATA[<p>##所需步骤<br>1.导包<br>2.配置</p><a id="more"></a><p>###导包<br>spring-web-4.0.5.RELEASE</p><p>###配置<br>在web.xml中配置前端控制器拦截所有请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;dis&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">DispatcherServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">init</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">  &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;dis&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/&lt;/url-pattern&gt; // /表示这个项目下所有的</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>在目标处理器类中写有<strong>@RequestMapping</strong>注释的目标方法来处理请求</p><p><strong>url-pattern</strong>:</p><p><code>&quot;/&quot;</code>拦截所有请求，不拦截jsp页面，<code>*</code>，jsp请求，<br><code>&quot;/*&quot;</code>拦截所有请求，拦截jsp页面，<code>*</code>.jsp请求</p><p>处理<code>*.jsp</code>是tomcat做的事</p><p>服务器的大web.xml相当于父类概念中有<code>DefaultServlet</code>是<code>url-pattern=/</code><br>DefaultServlet是处理静态资源的，而除jsp，和servlet外剩下的都是静态资源；<br>当我们页面是index.html静态资源时，tomcat就会在服务器下找到这个资源并返回。<br>当我们配置中前端配置器<code>url-pattern=/</code>时，就会直接禁用DefaultServlet，那么静态资源就会来到DispatcherServlet（前端控制器）看是否有@RequestMapping注解方法是处理他的。</p><p><strong>运行流程</strong><br>1） 客户端点击链接会发送请求到当前项目<br>2） 来到tomcat服务器<br>3） springmvc的前端控制器收到所有请求<br>4） 看请求地址是哪个请求名是否匹配<br>5） 找到了目标处理器类和目标方法，直接利用返回执行目标方法；<br>6） 方法执行完成有返回值，可以直接写上页面地址<br>7） 拿到页面地址，前端控制器帮我们转发到页面；</p><p><strong>@RequestMapping作用</strong>:告诉spring这个方法用来处理什么请求；/可以省略，默认当前项目下的请求<br>在类上面加<strong>@RequestMapping注解时</strong>：为当前类所有方法的请求地址制定一个基准路径</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##所需步骤&lt;br&gt;1.导包&lt;br&gt;2.配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="MVC" scheme="http://yoursite.com/categories/MVC/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>声明式事务细节</title>
    <link href="http://yoursite.com/2020/06/04/spring-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1_1/"/>
    <id>http://yoursite.com/2020/06/04/spring-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1_1/</id>
    <published>2020-06-04T03:52:24.266Z</published>
    <updated>2020-06-05T08:36:39.588Z</updated>
    
    <content type="html"><![CDATA[<p>###事务细节<br>isolation-Isolation：事务隔离级别（根据业务特性调准）<br>propagation-Propagation：事务的传播行为（当事务嵌套运行时的情况）</p><p>异常分类：<br>    运行时异常（非检查异常）：可以不处理，默认自动回滚<br>    编译时异常（检查异常）：默认不回滚 需要try-carch或者抛出处理</p><p>noRollbackFor-Class[]：哪些异常事务可以不回滚<br>noRollbackForClassName-String[]（String全类名）</p><p>rollbackFor-Class[]：哪些异常事务需要回滚<br>rollbackForClassName-String[]</p><p>readOnly-boolean：设置事务为只读事务，可以进行事务优化<br>boolean=true：加快查询速度</p><p>timeout-int（秒为单位）：超时：事务超出指定执行时长后自动终止并回滚</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###事务细节&lt;br&gt;isolation-Isolation：事务隔离级别（根据业务特性调准）&lt;br&gt;propagation-Propagation：事务的传播行为（当事务嵌套运行时的情况）&lt;/p&gt;
&lt;p&gt;异常分类：&lt;br&gt;    运行时异常（非检查异常）：可以不处理，默认
      
    
    </summary>
    
    
      <category term="MVC" scheme="http://yoursite.com/categories/MVC/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>声明式事务</title>
    <link href="http://yoursite.com/2020/06/04/spring-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2020/06/04/spring-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-06-04T03:11:16.526Z</published>
    <updated>2020-06-05T15:51:15.342Z</updated>
    
    <content type="html"><![CDATA[<p>##所需步骤<br>1.导包<br>2.配置声明式事务</p><a id="more"></a><p>###导包<br>spring-jdbc-4.0.5.RELEASE<br>spring-tx-4.0.5.RELEASE</p><p>###配置声明式事务<br>1） 提供事务管理器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"transactionManager"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"DataSourceTransactionManager"</span>&gt;</span><br><span class="line">&lt;property name="dataSource" ref="数据源beanname"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>2） 开启基于注解的声明式事务（依赖tx命名空间）<br><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</code></p><p>如果选择开启基于xml的声明式事务，需要告知事务切面按照我们的切入点表达式去切入事务方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(* *.*(..))"</span> id=<span class="string">"pt"</span>&gt;</span><br><span class="line">&lt;aop:advisor advice-ref=<span class="string">""</span> pointcut-ref=<span class="string">"pt"</span>/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:advice id=<span class="string">"myadvice"</span> transaction-manager=<span class="string">"transactionManager"</span>&gt; <span class="comment">//指定配置哪个事务管理器</span></span><br><span class="line">&lt;tx:attributes&gt;</span><br><span class="line">&lt;tx:method name=<span class="string">"*"</span>/&gt;<span class="comment">//指明哪些方法是事务方法；切入点表达式只是说事务管理器要切入这些方法，是否需要被事务管理由这里决定</span></span><br><span class="line">&lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure><p>3) 给事务方法加注解（service）<br><strong>@Transactional</strong></p><p>###用处<br><strong>只要方法里有错误，即可回滚</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##所需步骤&lt;br&gt;1.导包&lt;br&gt;2.配置声明式事务&lt;/p&gt;
    
    </summary>
    
    
      <category term="MVC" scheme="http://yoursite.com/categories/MVC/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Aop切面编程</title>
    <link href="http://yoursite.com/2020/06/03/spring-Aop/"/>
    <id>http://yoursite.com/2020/06/03/spring-Aop/</id>
    <published>2020-06-03T06:46:49.655Z</published>
    <updated>2020-06-03T13:31:53.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所需步骤"><a href="#所需步骤" class="headerlink" title="所需步骤"></a>所需步骤</h2><p>1.导包<br>2.编程<br>3.测试</p><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p><strong>aspectjweaver-1.7.4<br>cglib-2.2.2<br>aopalliance-1.0<br>spring-aspects-4.0.0.RELEASE</strong></p><a id="more"></a><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>1） 将目标类和切片类都扫描加入容器中<br><strong><code>@Component</code></strong></p><p>2） 切片类加Aspect注解告诉spring它是切片类<br><strong><code>@Aspect</code></strong></p><p>3） 方法上加注解告诉Spring何时运行<br><strong>@Before：方法执行前运行<br>@After：方法执行后运行<br>@AfterReturning：方法正常返回后运行<br>@AfterThrowing：方法抛出异常后运行</strong></p><p>4） 切入点表达式格式<br>写在注解后<br><strong>单一方法   <code>(&quot;execution(访问权限符 返回值 类.方法*（参数)&quot;)    //可直接复制方法全类名</code><br>所有方法 <code>(&quot;execution(* *.*(..)&quot;)</code><br>*表示可以匹配任意字符，权限位置不能写<br>..表示匹配任意类型，任意多个参数</strong></p><p><strong>在通知方法运行时，拿到目标方法的详细信息</strong><br>需要在通知方法的参数列表上加一个参数：<strong>JoinPoint joinPoint</strong>：封装了当前目标方法的详细信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到目标方法运行使用的参数</span></span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line"><span class="comment">//获取到方法签名</span></span><br><span class="line">Signature signature = joinPoint.getSignature();</span><br><span class="line">String name = signature..getName;</span><br></pre></td></tr></table></figure><p><strong>在通知方法运行时，拿到目标方法的返回值，异常值</strong><br>在表达式中加一个<strong>returning</strong>值告诉谁来接收 然后在通知方法的参数列表上加一个需要接收值的参数即可<br>异常即改成<strong>throwing</strong> 通知方法上的参数为指定异常名 也可用<strong>Exception</strong>接收全部</p><p>5） 开启基于注解的aop功能；aop名称空间<br><strong><code>&lt;aop:aspectj-autoproxy/&gt;</code></strong></p><p>6） 可重用的切入点表达式<br>创建一个空方法，在方法上加上Pointcut注解在括号写上需要重复使用的切入点表达式<br>在其他注解上使用方法即可</p><p>7） 环绕通知<strong>@Around</strong>(难)<br>四合一通知就是环绕通知<br>环绕通知有一个参数： <strong>ProceedingJoinPoint pjp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"..."</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">Object[] args = pjp.getArgs</span><br><span class="line">Object proceed = pjp.proceed(args);  <span class="comment">//==method.invoke(obj,args)，可在这句上下写其他通知</span></span><br><span class="line"><span class="keyword">return</span> proceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了proceed 反射执行目标方法才能够获得值</p><h3 id="测试（仅AOP）"><a href="#测试（仅AOP）" class="headerlink" title="测试（仅AOP）"></a>测试（仅AOP）</h3><p><strong>需要从容器中拿到类对象，而且得用接口类型来接受<br>因为需要创建切面类来实现切面，所以从容器中获得的代理对象是代理类class<code>com.sun.proxy.$Proxy..</code><br>而他们的父类都是目标类的接口类，所以最好直接用id来获取bean</strong></p><p>###Aop使用场景：<br>1） 加日志保存到数据库；<br>2） 做权限验证；<br>3） 事务控制</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;所需步骤&quot;&gt;&lt;a href=&quot;#所需步骤&quot; class=&quot;headerlink&quot; title=&quot;所需步骤&quot;&gt;&lt;/a&gt;所需步骤&lt;/h2&gt;&lt;p&gt;1.导包&lt;br&gt;2.编程&lt;br&gt;3.测试&lt;/p&gt;
&lt;h3 id=&quot;导包&quot;&gt;&lt;a href=&quot;#导包&quot; class=&quot;headerlink&quot; title=&quot;导包&quot;&gt;&lt;/a&gt;导包&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;aspectjweaver-1.7.4&lt;br&gt;cglib-2.2.2&lt;br&gt;aopalliance-1.0&lt;br&gt;spring-aspects-4.0.0.RELEASE&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MVC" scheme="http://yoursite.com/categories/MVC/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>stack</title>
    <link href="http://yoursite.com/2020/05/14/stack/"/>
    <id>http://yoursite.com/2020/05/14/stack/</id>
    <published>2020-05-14T14:06:57.000Z</published>
    <updated>2020-05-14T14:09:37.503Z</updated>
    
    <content type="html"><![CDATA[<p>###fff</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###fff&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="双栈的四则运算" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%A0%88%E7%9A%84%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Spring基于xml的Aop</title>
    <link href="http://yoursite.com/2020/05/14/Spring%E5%9F%BA%E4%BA%8Exml%E7%9A%84Aop/"/>
    <id>http://yoursite.com/2020/05/14/Spring%E5%9F%BA%E4%BA%8Exml%E7%9A%84Aop/</id>
    <published>2020-05-14T13:06:11.972Z</published>
    <updated>2020-06-03T13:43:10.708Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 关于maven和jdbc数据库连接中学到的和一些问题<br>categories: MVC<br>tags : Spring</p><hr><h3 id="基于xml的aop"><a href="#基于xml的aop" class="headerlink" title="基于xml的aop"></a>基于xml的aop</h3><ol><li>将列表和数组连接的方法<br><code>List&lt;数组的数据类型&gt; list = Arrays.asList(需要转换成列表的数组)</code></li><li>把类中aop的切片注释去掉，在xml中实现代理切片<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id = "proxyAOP" class = "sp.CalProxy_xml"&gt;&lt;/bean&gt;&lt;!-- 生成了aop的xml方式的proxy代理实例，也可在类上用@component自动扫描生成实例 --&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">&lt;aop:aspect ref=<span class="string">"proxyAOP"</span>&gt;<span class="comment">//相当于加了@Aspect注解</span></span><br><span class="line">&lt;aop:pointcut expression=<span class="string">"execution(public int sp.ICal.*(..))"</span> id=<span class="string">"expl"</span>/&gt;</span><br><span class="line">&lt;aop:before method=<span class="string">"bf"</span> pointcut-ref=<span class="string">"expl"</span>/&gt;<span class="comment">//相当于加了@Before注解和加了个expl方法的切面表达式</span></span><br><span class="line">&lt;aop:after method=<span class="string">"af"</span> pointcut-ref=<span class="string">"expl"</span>/&gt;</span><br><span class="line">&lt;aop:after-returning method=<span class="string">"afr"</span> pointcut-ref=<span class="string">"expl"</span> returning=<span class="string">"ob"</span>/&gt;</span><br><span class="line">&lt;aop:after-throwing method=<span class="string">"aft"</span> pointcut-ref=<span class="string">"expl"</span> throwing=<span class="string">"ex"</span>/&gt;</span><br><span class="line">&lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li><li>在AfterReturning中的returning参数需要注意返回值类型是什么。</li><li>aop Aspect的自动代理（自己加注解的方法）<br><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></li><li>自动扫描类实例化<br><code>&lt;context:component-scan base-package=&quot;需要扫描的类的包名&quot;&gt;&lt;/context:component-scan&gt;</code><br><br><a id="more"></a></li><li>在xml中实例化jdbctemplate在main方法中获取bean实例来执行sql语句<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id =<span class="string">"jdbctem"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span><br><span class="line">&lt;property name="dataSource" ref="ds"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li>当执行update语句修改多个记录的用int接受返回值时，需要用 <code>JSON.toJSONString(..)</code>来转换输出</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 关于maven和jdbc数据库连接中学到的和一些问题&lt;br&gt;categories: MVC&lt;br&gt;tags : Spring&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;基于xml的aop&quot;&gt;&lt;a href=&quot;#基于xml的aop&quot; class=&quot;headerlink&quot; title=&quot;基于xml的aop&quot;&gt;&lt;/a&gt;基于xml的aop&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将列表和数组连接的方法&lt;br&gt;&lt;code&gt;List&amp;lt;数组的数据类型&amp;gt; list = Arrays.asList(需要转换成列表的数组)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把类中aop的切片注释去掉，在xml中实现代理切片&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;bean id = &quot;proxyAOP&quot; class = &quot;sp.CalProxy_xml&quot;&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;!-- 生成了aop的xml方式的proxy代理实例，也可在类上用@component自动扫描生成实例 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;aop:config&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;aop:aspect ref=&lt;span class=&quot;string&quot;&gt;&quot;proxyAOP&quot;&lt;/span&gt;&amp;gt;		&lt;span class=&quot;comment&quot;&gt;//相当于加了@Aspect注解&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;aop:pointcut expression=&lt;span class=&quot;string&quot;&gt;&quot;execution(public int sp.ICal.*(..))&quot;&lt;/span&gt; id=&lt;span class=&quot;string&quot;&gt;&quot;expl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;aop:before method=&lt;span class=&quot;string&quot;&gt;&quot;bf&quot;&lt;/span&gt; pointcut-ref=&lt;span class=&quot;string&quot;&gt;&quot;expl&quot;&lt;/span&gt;/&amp;gt;	&lt;span class=&quot;comment&quot;&gt;//相当于加了@Before注解和加了个expl方法的切面表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;aop:after method=&lt;span class=&quot;string&quot;&gt;&quot;af&quot;&lt;/span&gt; pointcut-ref=&lt;span class=&quot;string&quot;&gt;&quot;expl&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;aop:after-returning method=&lt;span class=&quot;string&quot;&gt;&quot;afr&quot;&lt;/span&gt; pointcut-ref=&lt;span class=&quot;string&quot;&gt;&quot;expl&quot;&lt;/span&gt; returning=&lt;span class=&quot;string&quot;&gt;&quot;ob&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;aop:after-throwing method=&lt;span class=&quot;string&quot;&gt;&quot;aft&quot;&lt;/span&gt; pointcut-ref=&lt;span class=&quot;string&quot;&gt;&quot;expl&quot;&lt;/span&gt; throwing=&lt;span class=&quot;string&quot;&gt;&quot;ex&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/aop:aspect&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/aop:config&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;在AfterReturning中的returning参数需要注意返回值类型是什么。&lt;/li&gt;
&lt;li&gt;aop Aspect的自动代理（自己加注解的方法）&lt;br&gt;&lt;code&gt;&amp;lt;aop:aspectj-autoproxy&amp;gt;&amp;lt;/aop:aspectj-autoproxy&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自动扫描类实例化&lt;br&gt;&lt;code&gt;&amp;lt;context:component-scan base-package=&amp;quot;需要扫描的类的包名&amp;quot;&amp;gt;&amp;lt;/context:component-scan&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/14/hello-world/"/>
    <id>http://yoursite.com/2020/05/14/hello-world/</id>
    <published>2020-05-14T12:48:57.074Z</published>
    <updated>2020-05-14T13:08:20.856Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="wtf" scheme="http://yoursite.com/categories/wtf/"/>
    
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
  </entry>
  
</feed>
